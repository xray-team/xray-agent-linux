package proc_test

import (
	"reflect"
	"testing"

	"github.com/xray-team/xray-agent-linux/dto"
	"github.com/xray-team/xray-agent-linux/logger"
	"github.com/xray-team/xray-agent-linux/proc"
)

func Test_netStatDataSource_GetData(t *testing.T) {
	logger.Init()

	tests := []struct {
		caseDescription string
		filePath        string
		want            *dto.Netstat
		wantErr         bool
	}{
		{
			caseDescription: "no file",
			filePath:        "./testfiles/NetDev/nofile",
			want:            nil,
			wantErr:         true,
		},
		{
			caseDescription: "netstat-kernel4.15.0-66-generic",
			filePath:        "./testfiles/netNetstat/netstat-kernel4.15.0-66-generic",
			want: &dto.Netstat{
				Ext: map[string]map[string]int64{
					"TcpExt": {
						"SyncookiesSent":            1,
						"SyncookiesRecv":            2,
						"SyncookiesFailed":          3,
						"EmbryonicRsts":             4,
						"PruneCalled":               5,
						"RcvPruned":                 6,
						"OfoPruned":                 7,
						"OutOfWindowIcmps":          8,
						"LockDroppedIcmps":          9,
						"ArpFilter":                 10,
						"TW":                        11,
						"TWRecycled":                12,
						"TWKilled":                  13,
						"PAWSActive":                14,
						"PAWSEstab":                 15,
						"DelayedACKs":               16,
						"DelayedACKLocked":          17,
						"DelayedACKLost":            18,
						"ListenOverflows":           19,
						"ListenDrops":               20,
						"TCPHPHits":                 21,
						"TCPPureAcks":               22,
						"TCPHPAcks":                 23,
						"TCPRenoRecovery":           24,
						"TCPSackRecovery":           25,
						"TCPSACKReneging":           26,
						"TCPSACKReorder":            27,
						"TCPRenoReorder":            28,
						"TCPTSReorder":              29,
						"TCPFullUndo":               30,
						"TCPPartialUndo":            31,
						"TCPDSACKUndo":              32,
						"TCPLossUndo":               33,
						"TCPLostRetransmit":         34,
						"TCPRenoFailures":           35,
						"TCPSackFailures":           36,
						"TCPLossFailures":           37,
						"TCPFastRetrans":            38,
						"TCPSlowStartRetrans":       39,
						"TCPTimeouts":               40,
						"TCPLossProbes":             41,
						"TCPLossProbeRecovery":      42,
						"TCPRenoRecoveryFail":       43,
						"TCPSackRecoveryFail":       44,
						"TCPRcvCollapsed":           45,
						"TCPDSACKOldSent":           46,
						"TCPDSACKOfoSent":           47,
						"TCPDSACKRecv":              48,
						"TCPDSACKOfoRecv":           49,
						"TCPAbortOnData":            50,
						"TCPAbortOnClose":           51,
						"TCPAbortOnMemory":          52,
						"TCPAbortOnTimeout":         53,
						"TCPAbortOnLinger":          54,
						"TCPAbortFailed":            55,
						"TCPMemoryPressures":        56,
						"TCPMemoryPressuresChrono":  57,
						"TCPSACKDiscard":            58,
						"TCPDSACKIgnoredOld":        59,
						"TCPDSACKIgnoredNoUndo":     60,
						"TCPSpuriousRTOs":           61,
						"TCPMD5NotFound":            62,
						"TCPMD5Unexpected":          63,
						"TCPMD5Failure":             64,
						"TCPSackShifted":            65,
						"TCPSackMerged":             66,
						"TCPSackShiftFallback":      67,
						"TCPBacklogDrop":            68,
						"PFMemallocDrop":            69,
						"TCPMinTTLDrop":             70,
						"TCPDeferAcceptDrop":        71,
						"IPReversePathFilter":       72,
						"TCPTimeWaitOverflow":       73,
						"TCPReqQFullDoCookies":      74,
						"TCPReqQFullDrop":           75,
						"TCPRetransFail":            76,
						"TCPRcvCoalesce":            77,
						"TCPOFOQueue":               78,
						"TCPOFODrop":                79,
						"TCPOFOMerge":               80,
						"TCPChallengeACK":           81,
						"TCPSYNChallenge":           82,
						"TCPFastOpenActive":         83,
						"TCPFastOpenActiveFail":     84,
						"TCPFastOpenPassive":        85,
						"TCPFastOpenPassiveFail":    86,
						"TCPFastOpenListenOverflow": 87,
						"TCPFastOpenCookieReqd":     88,
						"TCPFastOpenBlackhole":      89,
						"TCPSpuriousRtxHostQueues":  90,
						"BusyPollRxPackets":         91,
						"TCPAutoCorking":            92,
						"TCPFromZeroWindowAdv":      93,
						"TCPToZeroWindowAdv":        94,
						"TCPWantZeroWindowAdv":      95,
						"TCPSynRetrans":             96,
						"TCPOrigDataSent":           97,
						"TCPHystartTrainDetect":     98,
						"TCPHystartTrainCwnd":       99,
						"TCPHystartDelayDetect":     100,
						"TCPHystartDelayCwnd":       101,
						"TCPACKSkippedSynRecv":      102,
						"TCPACKSkippedPAWS":         103,
						"TCPACKSkippedSeq":          104,
						"TCPACKSkippedFinWait2":     105,
						"TCPACKSkippedTimeWait":     106,
						"TCPACKSkippedChallenge":    107,
						"TCPWinProbe":               108,
						"TCPKeepAlive":              109,
						"TCPMTUPFail":               110,
						"TCPMTUPSuccess":            111,
						"TCPWqueueTooBig":           112,
					},
					"IpExt": {
						"InNoRoutes":      200,
						"InTruncatedPkts": 201,
						"InMcastPkts":     202,
						"OutMcastPkts":    203,
						"InBcastPkts":     204,
						"OutBcastPkts":    205,
						"InOctets":        206,
						"OutOctets":       207,
						"InMcastOctets":   208,
						"OutMcastOctets":  209,
						"InBcastOctets":   210,
						"OutBcastOctets":  211,
						"InCsumErrors":    212,
						"InNoECTPkts":     213,
						"InECT1Pkts":      214,
						"InECT0Pkts":      215,
						"InCEPkts":        216,
						"ReasmOverlaps":   217,
					},
				},
			},
			wantErr: false,
		},
		{
			caseDescription: "snmp-kernel4.15.0-66-generic-real",
			filePath:        "./testfiles/netNetstat/snmp-kernel4.15.0-66-generic-real",
			want: &dto.Netstat{Ext: map[string]map[string]int64{
				"Ip": {
					"Forwarding":      1,
					"DefaultTTL":      64,
					"InReceives":      1850899,
					"InHdrErrors":     0,
					"InAddrErrors":    0,
					"ForwDatagrams":   23063,
					"InUnknownProtos": 7,
					"InDiscards":      0,
					"InDelivers":      1827827,
					"OutRequests":     1689066,
					"OutDiscards":     70,
					"OutNoRoutes":     0,
					"ReasmTimeout":    0,
					"ReasmReqds":      0,
					"ReasmOKs":        0,
					"ReasmFails":      0,
					"FragOKs":         0,
					"FragFails":       0,
					"FragCreates":     0,
				},
				"Icmp": {
					"InMsgs":           8121,
					"InErrors":         3578,
					"InCsumErrors":     0,
					"InDestUnreachs":   3643,
					"InTimeExcds":      131,
					"InParmProbs":      0,
					"InSrcQuenchs":     0,
					"InRedirects":      0,
					"InEchos":          4341,
					"InEchoReps":       5,
					"InTimestamps":     0,
					"InTimestampReps":  1,
					"InAddrMasks":      0,
					"InAddrMaskReps":   0,
					"OutMsgs":          7012,
					"OutErrors":        0,
					"OutDestUnreachs":  2667,
					"OutTimeExcds":     0,
					"OutParmProbs":     0,
					"OutSrcQuenchs":    0,
					"OutRedirects":     0,
					"OutEchos":         4,
					"OutEchoReps":      4341,
					"OutTimestamps":    0,
					"OutTimestampReps": 0,
					"OutAddrMasks":     0,
					"OutAddrMaskReps":  0,
				},
				"IcmpMsg": {
					"InType0":  5,
					"InType3":  3643,
					"InType8":  4341,
					"InType11": 131,
					"InType14": 1,
					"OutType0": 4341,
					"OutType3": 2667,
					"OutType8": 4,
				},
				"Tcp": {
					"RtoAlgorithm": 1,
					"RtoMin":       200,
					"RtoMax":       120000,
					"MaxConn":      -1,
					"ActiveOpens":  45309,
					"PassiveOpens": 67439,
					"AttemptFails": 66045,
					"EstabResets":  448,
					"CurrEstab":    3,
					"InSegs":       2485981,
					"OutSegs":      1919426,
					"RetransSegs":  104099,
					"InErrs":       22819,
					"OutRsts":      351607,
					"InCsumErrors": 22819,
				},
				"Udp": {
					"InDatagrams":  5784,
					"NoPorts":      2722,
					"InErrors":     10,
					"OutDatagrams": 5929,
					"RcvbufErrors": 0,
					"SndbufErrors": 0,
					"InCsumErrors": 10,
					"IgnoredMulti": 0,
				},
				"UdpLite": {
					"InDatagrams":  0,
					"NoPorts":      0,
					"InErrors":     0,
					"OutDatagrams": 0,
					"RcvbufErrors": 0,
					"SndbufErrors": 0,
					"InCsumErrors": 0,
					"IgnoredMulti": 0,
				},
			}},
			wantErr: false,
		},
	}

	for _, testCase := range tests {
		tt := testCase
		t.Run(tt.caseDescription, func(t *testing.T) {
			netStatDataSource := proc.NewNetStatDataSource(tt.filePath, "")
			got, err := netStatDataSource.GetData()
			if (err != nil) != tt.wantErr {
				t.Errorf("ParseNetNetstat() error = %v, wantErr %v", err, tt.wantErr)

				return
			}

			if !reflect.DeepEqual(got, tt.want) {
				t.Errorf("ParseNetNetstat() got = %v, want %v", got, tt.want)
			}
		})
	}
}
